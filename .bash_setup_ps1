#!/bin/bash
#
# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * the branch/status of the current git repository
#    * the branch of the current subversion repository
#    * the return value of the previous command
# 
# USAGE:
#
#   1. Save this file as ~/.git_svn_bash_prompt
#   2. Add the following line to the end of your ~/.profile or ~/.bash_profile:
#        . ~/.git_svn_bash_prompt
#
# AUTHOR:
# 
#   Scott Woods <scott@westarete.com>
#   West Arete Computing
#
#   Based on work by halbtuerke and lakiolen.
#
#   http://gist.github.com/31967

# The various escape codes that we can use to color our prompt.
# Reset
Color_Off="\[\033[0m\]"       # Text Reset

# Regular Colors
Black="\[\033[0;30m\]"        # Black
Red="\[\033[0;31m\]"          # Red
Green="\[\033[0;32m\]"        # Green
Yellow="\[\033[0;33m\]"       # Yellow
Blue="\[\033[0;34m\]"         # Blue
Purple="\[\033[0;35m\]"       # Purple
Cyan="\[\033[0;36m\]"         # Cyan
White="\[\033[0;37m\]"        # White

# Bold
BBlack="\[\033[1;30m\]"       # Black
BRed="\[\033[1;31m\]"         # Red
BGreen="\[\033[1;32m\]"       # Green
BYellow="\[\033[1;33m\]"      # Yellow
BBlue="\[\033[1;34m\]"        # Blue
BPurple="\[\033[1;35m\]"      # Purple
BCyan="\[\033[1;36m\]"        # Cyan
BWhite="\[\033[1;37m\]"       # White

# Underline
UBlack="\[\033[4;30m\]"       # Black
URed="\[\033[4;31m\]"         # Red
UGreen="\[\033[4;32m\]"       # Green
UYellow="\[\033[4;33m\]"      # Yellow
UBlue="\[\033[4;34m\]"        # Blue
UPurple="\[\033[4;35m\]"      # Purple
UCyan="\[\033[4;36m\]"        # Cyan
UWhite="\[\033[4;37m\]"       # White

# Background
On_Black="\[\033[40m\]"       # Black
On_Red="\[\033[41m\]"         # Red
On_Green="\[\033[42m\]"       # Green
On_Yellow="\[\033[43m\]"      # Yellow
On_Blue="\[\033[44m\]"        # Blue
On_Purple="\[\033[45m\]"      # Purple
On_Cyan="\[\033[46m\]"        # Cyan
On_White="\[\033[47m\]"       # White

# High Intensty
IBlack="\[\033[0;90m\]"       # Black
IRed="\[\033[0;91m\]"         # Red
IGreen="\[\033[0;92m\]"       # Green
IYellow="\[\033[0;93m\]"      # Yellow
IBlue="\[\033[0;94m\]"        # Blue
IPurple="\[\033[0;95m\]"      # Purple
ICyan="\[\033[0;96m\]"        # Cyan
IWhite="\[\033[0;97m\]"       # White

# Bold High Intensty
BIBlack="\[\033[1;90m\]"      # Black
BIRed="\[\033[1;91m\]"        # Red
BIGreen="\[\033[1;92m\]"      # Green
BIYellow="\[\033[1;93m\]"     # Yellow
BIBlue="\[\033[1;94m\]"       # Blue
BIPurple="\[\033[1;95m\]"     # Purple
BICyan="\[\033[1;96m\]"       # Cyan
BIWhite="\[\033[1;97m\]"      # White

# High Intensty backgrounds
On_IBlack="\[\033[0;100m\]"   # Black
On_IRed="\[\033[0;101m\]"     # Red
On_IGreen="\[\033[0;102m\]"   # Green
On_IYellow="\[\033[0;103m\]"  # Yellow
On_IBlue="\[\033[0;104m\]"    # Blue
On_IPurple="\[\033[10;95m\]"  # Purple
On_ICyan="\[\033[0;106m\]"    # Cyan
On_IWhite="\[\033[0;107m\]"   # White

# Various variables you might want for your PS1 prompt instead
Time12h="\t"
Time12a="\@"
PathShort="\w"
PathFull="\W"
NewLine="\n"
Jobs="\j"


# Detect whether the current directory is a git repository.
# Detect whether the current directory is a git repository.
function is_git_repository {
[ $(git ls-files . | wc -l) -gt 0 ] && git branch > /dev/null 2>&1
}

# Detect whether the current directory is a subversion repository.
function is_svn_repository {
	test -d .svn
}

# Determine the branch/state information for this git repository.
function set_git_branch {
	# Capture the output of the "git status" command.
	git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
	if [[ ${git_status} =~ "working directory clean" ]]; then
		state="${Green}"
	elif [[ ${git_status} =~ "Changes to be committed" ]]; then
		state="${Yellow}"
	else
		state="${Red}"
	fi
  
	# Set arrow icon based on status against remote.
	remote_pattern="# Your branch is (ahead|behind) .*by ([0-9][0-9]*)"

	# NOTE: This pings the server. If this is slow, change git_remote_status to just git_status
	query_git_remote_status
	if [[ ${git_remote_status} =~ ${remote_pattern} ]]; then
		if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
			remote="↑ $Color_Off(${BASH_REMATCH[2]})"
		else
			remote="↓ $Color_Off(${BASH_REMATCH[2]})"
	fi
	else
		remote=""
	fi
	diverge_pattern="# Your branch and (.*) have diverged.*and have ([0-9][0-9]*) and ([0-9][0-9]*)"
	if [[ ${git_status} =~ ${diverge_pattern} ]]; then
		remote="↕ $Color_Off(L:${BASH_REMATCH[2]}), (R:${BASH_REMATCH[3]})"
	fi
  
	# Get the name of the branch.
	#branch_pattern="^# On branch ([^${IFS}]*)"    
	#if [[ ${git_status} =~ ${branch_pattern} ]]; then
	#	branch=${BASH_REMATCH[1]}
	#fi
	branch=$(__git_ps1)
	# Set the final branch string.
	BRANCH="${state}${branch}${remote}${Color_Off} "
}

function query_git_remote_status {
	newfilename=`echo $PWD | sed -e 's/[-/+=.,]/_/g'`
	current_time="$(date +%s)"
	file_modification_time="$(stat -c %Y /tmp/gitremotestatus$newfilename 2> /dev/null || (echo $(git remote update 2>&1 > /dev/null && git status -uno 2> /dev/null) >  /tmp/gitremotestatus$newfilename && stat -c %Y /tmp/gitremotestatus$newfilename))"
	file_modification_time="$(($file_modification_time + 300))"
	if [ "$file_modification_time" -lt "$current_time" ]; then 
		rm /tmp/gitremotestatus$newfilename
		echo $(git remote update 2>&1 > /dev/null && git status -uno 2> /dev/null) >  /tmp/gitremotestatus$newfilename
		#echo "Updating the file!"
		git_remote_status="$(cat /tmp/gitremotestatus$newfilename)"
	else
		git_remote_status="$(git status 2> /dev/null)"
	fi
}
# Determine the branch information for this subversion repository. No support
# for svn status, since that needs to hit the remote repository.
function set_svn_branch {
	# Capture the output of the "git status" command.
	svn_info="$(svn info | egrep '^URL: ' 2> /dev/null)"

	# Get the name of the branch.
	branch_pattern="^URL: .*/(branches|tags)/([^/]+)"
	trunk_pattern="^URL: .*/trunk(/.*)?$"
	if [[ ${svn_info} =~ $branch_pattern ]]; then
		branch=${BASH_REMATCH[2]}
	elif [[ ${svn_info} =~ $trunk_pattern ]]; then
		branch='trunk'
	fi

	# Set the final branch string.
	BRANCH="(${branch}) "
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
	if test $1 -eq 0 ; then
		PROMPT_SYMBOL="\$"
	else
		PROMPT_SYMBOL="${Red}$1${Color_Off}"
	fi
}

# Set the full bash prompt.
function set_bash_prompt () {
	# Set the PROMPT_SYMBOL variable. We do this first so we don't lose the 
	# return value of the last command.
	EXIT_STATUS=$?
	# Set the BRANCH variable.
	if is_git_repository ; then
		set_git_branch
	elif is_svn_repository ; then
		set_svn_branch
	else
		BRANCH=''
	fi

	if test $EXIT_STATUS -eq 0 ; then
			EXIT_SYMBOL=""
	else
			EXIT_SYMBOL="${EXIT_STATUS}|"
	fi

	PS1="$EXIT_SYMBOL$IBlack[\t]$Color_Off $Yellow\w$Color_Off${BRANCH}\$ "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND="set_bash_prompt; history -a;"
